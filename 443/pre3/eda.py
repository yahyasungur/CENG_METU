# -*- coding: utf-8 -*-
"""eda.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o3wXjPXwznc-FH_kWhZhgQ3BMjjBhhdJ
"""

import pandas as pd

# Read the CSV file
df = pd.read_csv('data.csv')

# 1. What was the price of the most expensive product sold?
max_price = df[['A', 'B', 'C', 'D', 'E']].max().max()
print("The price of the most expensive product sold:", max_price)

# 2. What was the date of the highest paid purchase by a customer?
highest_paid_purchase_date = df['Date'][df[['A', 'B', 'C', 'D', 'E']].sum(axis=1).idxmax()]
print("The date of the highest paid purchase:", highest_paid_purchase_date)

# 3. What was the most popular product before 2000?
popularity_before_2000 = df[df['Date'].str[:4].astype(int) < 2000][['A', 'B', 'C', 'D', 'E']].count()#.idxmax()
# Take the name of the product with the highest count
popularity_before_2000 = popularity_before_2000.idxmax()
print("The most popular product before 2000:", popularity_before_2000)

# 4. What was the least popular product after and including 2000?
popularity_after_2000 = df[df['Date'].str[:4].astype(int) >= 2000][['A', 'B', 'C', 'D', 'E']].count()#.idxmin()
# Take the name of the product with the lowest count
popularity_after_2000 = popularity_after_2000.idxmin()
print("The least popular product after and including 2000:", popularity_after_2000)

# 5. What was the most popular product among teens? (Hint: find the product with the smallest average customer age)
# Take the count of rows where A is not NaN
number_of_A = df[df['A'].notna()].count()['A']
total_age_of_A = df[df['A'].notna()]['Age'].sum()
avarage_age_of_A = total_age_of_A / number_of_A

# Take the count of rows where B is not NaN
number_of_B = df[df['B'].notna()].count()['B']
total_age_of_B = df[df['B'].notna()]['Age'].sum()
avarage_age_of_B = total_age_of_B / number_of_B

# Take the count of rows where C is not NaN
number_of_C = df[df['C'].notna()].count()['C']
total_age_of_C = df[df['C'].notna()]['Age'].sum()
avarage_age_of_C = total_age_of_C / number_of_C

# Take the count of rows where D is not NaN
number_of_D = df[df['D'].notna()].count()['D']
total_age_of_D = df[df['D'].notna()]['Age'].sum()
avarage_age_of_D = total_age_of_D / number_of_D

# Take the count of rows where E is not NaN
number_of_E = df[df['E'].notna()].count()['E']
total_age_of_E = df[df['E'].notna()]['Age'].sum()
avarage_age_of_E = total_age_of_E / number_of_E

# Take the name of the product with the lowest average age
most_popular_product_among_teens = min(avarage_age_of_A, avarage_age_of_B, avarage_age_of_C, avarage_age_of_D, avarage_age_of_E)
if most_popular_product_among_teens == avarage_age_of_A:
    most_popular_product_among_teens = 'A'
elif most_popular_product_among_teens == avarage_age_of_B:
    most_popular_product_among_teens = 'B'
elif most_popular_product_among_teens == avarage_age_of_C:
    most_popular_product_among_teens = 'C'
elif most_popular_product_among_teens == avarage_age_of_D:
    most_popular_product_among_teens = 'D'
elif most_popular_product_among_teens == avarage_age_of_E:
    most_popular_product_among_teens = 'E'
print("The most popular product among teens:", most_popular_product_among_teens)

# 6. What was the most inflated product on the data?
# Convert the 'Date' column to datetime
df['Date'] = pd.to_datetime(df['Date'])

# Initialize a variable to track max inflation
max_inflation = 0
product_name = ''

# For each product column
for product in ['A', 'B', 'C', 'D', 'E']:
    # Exclude rows where product is not sold (NaN)
    product_df = df[df[product].notna()]
    
    # If no data is available for a product, continue to the next product
    if product_df.empty:
        continue
    
    # Sort product_df by date
    product_df = product_df.sort_values('Date')

    # Get the price of the oldest and the newest purchase
    oldest_price = product_df.iloc[0][product]
    newest_price = product_df.iloc[-1][product]
    # print("----------------")
    # print(product_df.iloc[0]['Date'],product_df.iloc[-1]['Date'])
    # print(product, oldest_price, newest_price)
    
    # Calculate inflation rate for the product
    inflation_rate = abs((newest_price - oldest_price)) / oldest_price * 100
    
    # If this product's inflation rate is higher than current max, update max_inflation and product_name
    if inflation_rate > max_inflation:
        max_inflation = inflation_rate
        product_name = product

print("The most inflated product is", product_name, "with an inflation rate of", max_inflation, "%.")